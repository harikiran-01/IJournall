# This is a basic workflow to help you get started with Actions
name: Feature Branch CI
# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the develop branch
on:
  push:
    branches: 
      - '*'
      - '!master'
  pull_request:
    branches: [ workflow_test_branch ]
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Run lint
        run: ./gradlew lintDebug

      - name: Upload html test report
        uses: actions/upload-artifact@v2
        with:
          name: lint.html
          path: app/build/reports/lint-results-debug.html

  unit-test:
    needs: [ lint ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Run tests
        run: ./gradlew test

      - name: Upload test report
        uses: actions/upload-artifact@v2
        with:
          name: unit_test_report
          path: app/build/reports/tests/testDebugUnitTest/

  instrumentation-test:
    needs: [ unit-test ]
    runs-on: macos-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Run espresso tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew connectedCheck

      - name: Upload test report
        uses: actions/upload-artifact@v2
        with:
          name: instrumentation_test_report
          path: app/build/reports/androidTests/connected/

  debug-apk:
    needs: [ instrumentation-test ]
    name : Generate DEBUG APK
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a single command using the runners shell
      - name: set up JDK 11.0.13
        uses: actions/setup-java@v1
        with: 
          java-version: 11.0.13
      # Runs a set of commands using the runners shell
      - name: Building debug APK
        run: bash ./gradlew assembleDebug --stacktrace
      - name: Upload Apk artifact
        uses: actions/upload-artifact@v2
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk
      - name: Upload to Slack
        env:
          SLACK_SECRET: ${{ secrets.SLACK_UPLOAD_APK_BOT }}
        run: "curl -F file=@app/build/outputs/apk/debug/app-debug.apk -F \"initial_comment=Debug build\" -F channels=general,random -H \"Authorization: Bearer $SLACK_SECRET\" https://slack.com/api/files.upload"
  
#  release-apk:
#    name: Generate Release APK
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: set up JDK 11.0.13
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11.0.13
#      - name: Building release APK
#        run: bash ./gradlew assembleRelease --stacktrace
#      - name: Upload Apk Artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: release-apk
#          path: app/release/app-release.apk